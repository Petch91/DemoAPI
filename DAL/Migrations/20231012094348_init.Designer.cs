// <auto-generated />
using DAL.Domains;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231012094348_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"), 1L, 1);

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("GameId");

                    b.ToTable("games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Resume = "Best Game",
                            Title = "FF9"
                        },
                        new
                        {
                            GameId = 2,
                            Resume = "manque un truc",
                            Title = "FF16"
                        },
                        new
                        {
                            GameId = 3,
                            Resume = "Best TPS Game",
                            Title = "Uncharted"
                        },
                        new
                        {
                            GameId = 4,
                            Resume = "Best Action Game",
                            Title = "God Of War"
                        });
                });

            modelBuilder.Entity("DAL.Entities.GameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("gameGenres");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            GameId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            GameId = 2,
                            GenreId = 1
                        },
                        new
                        {
                            GameId = 3,
                            GenreId = 3
                        },
                        new
                        {
                            GameId = 4,
                            GenreId = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.GameUser", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("UserID", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("gameUsers");
                });

            modelBuilder.Entity("DAL.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("GenreId");

                    b.ToTable("genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Label = "Action"
                        },
                        new
                        {
                            GenreId = 2,
                            Label = "RPG"
                        },
                        new
                        {
                            GenreId = 3,
                            Label = "TPS"
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("UserId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@gmail.com",
                            PasswordHash = "$2a$11$kh3Vcrjf8w3n9e63ZOeTf.rTYWaqcouPnQHayS2dRjt4bs9siaNMG",
                            RoleId = 3,
                            UserName = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "petch@gmail.com",
                            PasswordHash = "$2a$11$sMpXEaApZ4Cwk1SppBrEWegwcDgweq30xBg/sLoGsFVZM3DBOApYO",
                            RoleId = 0,
                            UserName = "Petch"
                        });
                });

            modelBuilder.Entity("DAL.Entities.GameGenre", b =>
                {
                    b.HasOne("DAL.Entities.Game", "Game")
                        .WithMany("Genres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Genre", "Genre")
                        .WithMany("ByGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DAL.Entities.GameUser", b =>
                {
                    b.HasOne("DAL.Entities.Game", "Game")
                        .WithMany("ByUsers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Favoris")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Game", b =>
                {
                    b.Navigation("ByUsers");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("DAL.Entities.Genre", b =>
                {
                    b.Navigation("ByGenres");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Favoris");
                });
#pragma warning restore 612, 618
        }
    }
}
